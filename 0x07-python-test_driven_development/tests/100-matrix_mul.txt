"""
Test File for the `matrix_mul` Function

This test file contains doctests to validate the functionality of the 
`matrix_mul` function. The function performs matrix multiplication on two 
matrices and returns the resulting matrix while ensuring compatibility 
and input validation.

Usage:
    To run the tests, use the following command:
    $ python3 -m doctest -v 100-matrix_mul.txt

Notes:
------
- This file tests both standard and edge cases for the `matrix_mul` function.
- Use `doctest` to ensure correctness and validate behavior.
- Includes cases such as:
  - Valid matrix multiplication
  - Invalid input types
  - Matrices with inconsistent row sizes
  - Empty matrices
  - Non-numeric elements in matrices
  - Incompatible matrix dimensions for multiplication
"""

# Import module:
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Test Cases and Expected Behavior
1. **Valid Cases**

	# Valid multiplication case
	>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
	[[19, 22], [43, 50]]

	# Valid multiplication case with more rows
	>>> matrix_mul([[1, 2], [3, 4], [3, 4]], [[5, 6, 1], [7, 8, 2]])
	[[19, 22, 5], [43, 50, 11], [43, 50, 11]]

2. **Error Cases**

	2.1 **Invalid Input Types**
		# Invalid type for first matrix
		>>> matrix_mul("Holberton", [[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: m_a must be a list

		# Invalid type for second matrix
		>>> matrix_mul([[5, 6], [7, 8]], "Holberton")
		Traceback (most recent call last):
			...
		TypeError: m_b must be a list
		
	2.2 Empty Matrices
		# First matrix is empty
		>>> matrix_mul([[]], [[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		ValueError: m_a can't be empty

		# Second matrix is empty
		>>> matrix_mul([[5, 6], [7, 8]], [[]])
		Traceback (most recent call last):
			...
		ValueError: m_b can't be empty


	2.3 **Non-Numeric Elements**
		# First matrix contains non-numeric elements
		>>> matrix_mul([[5, "6"], [7, 8]], [[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: m_a should contain only integers or floats

		# Second matrix contains non-numeric elements
		>>> matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: m_b should contain only integers or floats

	
	2.4 **Inconsistent Row Sizes**
		# Rows of the first matrix have different sizes
		>>> matrix_mul([[5, 6, 10], [7, 8]], [[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: each row of m_a must be of the same size

		# Rows of the second matrix have different sizes
		>>> matrix_mul([[5, 6], [7, 8]], [[5, 6, 1], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: each row of m_b must be of the same size


	2.5 **Incompatible Matrices**
		# Matrices cannot be multiplied due to incompatible sizes
		>>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2], [3, 4]])
		Traceback (most recent call last):
			...
		ValueError: m_a and m_b can't be multiplied
	
	
	2.6 **Missing Arguments***
		# Missing one argument
		>>> matrix_mul([[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

		# Missing two arguments
		>>> matrix_mul()
		Traceback (most recent call last):
			...
		TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
	
	2.7 **Argumenst not list of lists**
		# First matrix is not a list of lists
		>>> matrix_mul([1, 2, 3, 4], [[5, 6], [7, 8]])
		Traceback (most recent call last):
			...
		TypeError: m_a must be a list of lists

		# Second matrix is not a list of lists
		>>> matrix_mul([[5, 6], [7, 8]], [1, 2, 3, 4])
		Traceback (most recent call last):
			...
		TypeError: m_b must be a list of lists